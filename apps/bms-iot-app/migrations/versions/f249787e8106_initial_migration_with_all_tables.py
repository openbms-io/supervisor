"""initial migration with all tables

Revision ID: f249787e8106
Revises:
Create Date: 2025-09-26 15:47:10.645101

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = "f249787e8106"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "bacnet_config",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("bacnet_devices", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "bacnet_readers",
        sa.Column("id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("iot_device_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("ip_address", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("subnet_mask", sa.Integer(), nullable=False),
        sa.Column("bacnet_device_id", sa.Integer(), nullable=False),
        sa.Column("port", sa.Integer(), nullable=False),
        sa.Column("bbmd_enabled", sa.Boolean(), nullable=False),
        sa.Column("bbmd_server_ip", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column(
            "connection_status", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column("last_connected_at", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_bacnet_readers_iot_device_id"),
        "bacnet_readers",
        ["iot_device_id"],
        unique=False,
    )
    op.create_table(
        "controller_points",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "controller_ip_address", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("controller_port", sa.Integer(), nullable=False),
        sa.Column(
            "bacnet_object_type",
            sa.Enum(
                "ANALOG_INPUT",
                "ANALOG_OUTPUT",
                "ANALOG_VALUE",
                "BINARY_INPUT",
                "BINARY_OUTPUT",
                "BINARY_VALUE",
                "MULTI_STATE_INPUT",
                "MULTI_STATE_OUTPUT",
                "MULTI_STATE_VALUE",
                name="bacnetobjecttypeenum",
            ),
            nullable=False,
        ),
        sa.Column("point_id", sa.Integer(), nullable=False),
        sa.Column(
            "iot_device_point_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("controller_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("units", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("present_value", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "controller_device_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("is_uploaded", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("status_flags", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("event_state", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("out_of_service", sa.Boolean(), nullable=True),
        sa.Column("reliability", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("min_pres_value", sa.Float(), nullable=True),
        sa.Column("max_pres_value", sa.Float(), nullable=True),
        sa.Column("high_limit", sa.Float(), nullable=True),
        sa.Column("low_limit", sa.Float(), nullable=True),
        sa.Column("resolution", sa.Float(), nullable=True),
        sa.Column("priority_array", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("relinquish_default", sa.Float(), nullable=True),
        sa.Column("cov_increment", sa.Float(), nullable=True),
        sa.Column("time_delay", sa.Integer(), nullable=True),
        sa.Column("time_delay_normal", sa.Integer(), nullable=True),
        sa.Column("notification_class", sa.Integer(), nullable=True),
        sa.Column("notify_type", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("deadband", sa.Float(), nullable=True),
        sa.Column("limit_enable", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("event_enable", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "acked_transitions", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "event_time_stamps", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "event_message_texts", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.Column(
            "event_message_texts_config",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column("event_detection_enable", sa.Boolean(), nullable=True),
        sa.Column(
            "event_algorithm_inhibit_ref",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=True,
        ),
        sa.Column("event_algorithm_inhibit", sa.Boolean(), nullable=True),
        sa.Column("reliability_evaluation_inhibit", sa.Boolean(), nullable=True),
        sa.Column("error_info", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "created_at_unix_milli_timestamp",
            sa.BigInteger(),
            sa.Computed("(strftime('%s', created_at) * 1000)", persisted=True),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "deployment_config",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "organization_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("site_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("device_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("config_metadata", sa.JSON(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_deployment_config_device_id"),
        "deployment_config",
        ["device_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_deployment_config_organization_id"),
        "deployment_config",
        ["organization_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_deployment_config_site_id"),
        "deployment_config",
        ["site_id"],
        unique=False,
    )
    op.create_table(
        "iot_device_status",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("iot_device_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "organization_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column("site_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "monitoring_status",
            sa.Enum(
                "ACTIVE",
                "STOPPED",
                "ERROR",
                "INITIALIZING",
                name="monitoringstatusenum",
            ),
            nullable=True,
        ),
        sa.Column(
            "mqtt_connection_status",
            sa.Enum("CONNECTED", "DISCONNECTED", "ERROR", name="connectionstatusenum"),
            nullable=True,
        ),
        sa.Column(
            "bacnet_connection_status",
            sa.Enum("CONNECTED", "DISCONNECTED", "ERROR", name="connectionstatusenum"),
            nullable=True,
        ),
        sa.Column("cpu_usage_percent", sa.Float(), nullable=True),
        sa.Column("memory_usage_percent", sa.Float(), nullable=True),
        sa.Column("disk_usage_percent", sa.Float(), nullable=True),
        sa.Column("temperature_celsius", sa.Float(), nullable=True),
        sa.Column("uptime_seconds", sa.Integer(), nullable=True),
        sa.Column("load_average", sa.Float(), nullable=True),
        sa.Column("bacnet_devices_connected", sa.Integer(), nullable=True),
        sa.Column("bacnet_points_monitored", sa.Integer(), nullable=True),
        sa.Column("payload", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("received_at", sa.DateTime(), nullable=False),
        sa.Column(
            "created_at_unix_milli_timestamp",
            sa.BigInteger(),
            sa.Computed("(strftime('%s', created_at) * 1000)", persisted=True),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_iot_device_status_iot_device_id"),
        "iot_device_status",
        ["iot_device_id"],
        unique=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_iot_device_status_iot_device_id"), table_name="iot_device_status"
    )
    op.drop_table("iot_device_status")
    op.drop_index(op.f("ix_deployment_config_site_id"), table_name="deployment_config")
    op.drop_index(
        op.f("ix_deployment_config_organization_id"), table_name="deployment_config"
    )
    op.drop_index(
        op.f("ix_deployment_config_device_id"), table_name="deployment_config"
    )
    op.drop_table("deployment_config")
    op.drop_table("controller_points")
    op.drop_index(op.f("ix_bacnet_readers_iot_device_id"), table_name="bacnet_readers")
    op.drop_table("bacnet_readers")
    op.drop_table("bacnet_config")
    # ### end Alembic commands ###
